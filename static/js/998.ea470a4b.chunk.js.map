{"version":3,"file":"static/js/998.ea470a4b.chunk.js","mappings":"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","sources":["webpack://first_01/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://first_01/./src/components/Profile/MyPosts/Posts/Post.module.css?5aca","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","webpack://first_01/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__Jv0Yk\",\"posts\":\"MyPosts_posts__2Mhy-\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ESVTP\"};","import s from \"./Post.module.css\";\r\nfunction Post(props) {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src=\"https://cdn.dribbble.com/users/388052/screenshots/15969217/media/541d0e931dc044f08db966abeb598aec.jpg?compress=1&resize=400x300&vertical=top\"\r\n        alt=\"avatar\"\r\n      />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.likes}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Posts/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst AddNewPostForm = (props) => {\r\n  const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder=\"New Post Text\"\r\n          name=\"newPostText\"\r\n          component={Textarea}\r\n          validate={[required, maxLengthCreator(10)]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst PostForm = reduxForm({\r\n  form: \"ProfileAddNewPostForm\",\r\n})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo((props) => {\r\n  let postsElements = props.posts.map((p) => (\r\n    <Post key={p.id} message={p.message} likes={p.likesCount} />\r\n  ));\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My Post</h3>\r\n      <PostForm onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MyPosts;\r\n","import { connect } from \"react-redux\";\r\nimport { addPostCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostCreator(newPostText));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"header_image\":\"ProfileInfo_header_image__wQzl3\",\"userData\":\"ProfileInfo_userData__Sy5mq\",\"user\":\"ProfileInfo_user__HcVLB\",\"userAvatar\":\"ProfileInfo_userAvatar__HXnw6\",\"mainPhoto\":\"ProfileInfo_mainPhoto__JYzFZ\",\"contacts\":\"ProfileInfo_contacts__mz7zR\",\"formSummaryError\":\"ProfileInfo_formSummaryError__KqFc9\"};","import React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatusWhithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    props.isOwner && setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateUserStatus(status);\r\n  };\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <b>Status:</b>{\" \"}\r\n          <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"-----\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileStatusWhithHooks;\r\n","import { reduxForm } from \"redux-form\";\r\nimport {\r\n  Input,\r\n  Textarea,\r\n  createField,\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport ProfileStatusWhithHooks from \"./ProfileStatusWithHooks\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\nconst ProfileDataForm = ({\r\n  handleSubmit,\r\n  status,\r\n  updateUserStatus,\r\n  profile,\r\n  error,\r\n  onSubmitClose,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <b>Full name</b>: {createField(\"Full name\", \"fullName\", Input, [])}\r\n      </div>\r\n      <ProfileStatusWhithHooks\r\n        status={status}\r\n        updateUserStatus={updateUserStatus}\r\n      />\r\n      <div>\r\n        <b>Looking for a job</b>:{\" \"}\r\n        {createField(\"\", \"lookingForAJob\", Input, [], { type: \"checkbox\" })}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        {createField(\r\n          \"My professional skills\",\r\n          \"lookingForAJobDescription\",\r\n          Textarea,\r\n          []\r\n        )}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>: {createField(\"About me\", \"aboutMe\", Textarea, [])}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={s.contacts}>\r\n              <b>\r\n                {key}: {createField(key, \"contacts.\" + key, Input, [])}\r\n              </b>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {error && <div className={s.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Save</button>\r\n        <button onClick={onSubmitClose}>Close</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({\r\n  form: \"edit-profile\",\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWhithHooks from \"./ProfileStatusWithHooks\";\r\nimport userAvatar from \"./../../../assets/images/userAvatar.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nfunction ProfileInfo({\r\n  profile,\r\n  isOwner,\r\n  savePhoto,\r\n  status,\r\n  updateUserStatus,\r\n  saveProfile,\r\n}) {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      // setEditMode(false);\r\n    });\r\n  };\r\n  const onSubmitClose = () => {\r\n    setEditMode(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.user}>\r\n        <div className={s.userAvatar}>\r\n          <img\r\n            src={profile.photos.large || userAvatar}\r\n            className={s.mainPhoto}\r\n            alt=\"avatar\"\r\n          />\r\n          {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n        </div>\r\n        <div className={s.userData}>\r\n          {editMode ? (\r\n            <ProfileDataForm\r\n              initialValues={profile}\r\n              profile={profile}\r\n              status={status}\r\n              updateUserStatus={updateUserStatus}\r\n              onSubmit={onSubmit}\r\n              onSubmitClose={onSubmitClose}\r\n            />\r\n          ) : (\r\n            <ProfileData\r\n              profile={profile}\r\n              isOwner={isOwner}\r\n              goToEditMode={() => {\r\n                setEditMode(true);\r\n              }}\r\n              status={status}\r\n              updateUserStatus={updateUserStatus}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ProfileData = ({\r\n  profile,\r\n  isOwner,\r\n  goToEditMode,\r\n  status,\r\n  updateUserStatus,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <ProfileStatusWhithHooks\r\n        status={status}\r\n        updateUserStatus={updateUserStatus}\r\n        isOwner={isOwner}\r\n      />\r\n\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>Edit</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Contact = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contacts}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateUserStatus={props.updateUserStatus}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {\r\n  getUserProfile,\r\n  getUserStatus,\r\n  updateUserStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from \"../../redux/profile-reducer\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) userId = this.props.authorizedUserId;\r\n    this.props.getUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    let userId = this.props.match.params.userId;\r\n    if (prevProps.match.params.userId !== userId) {\r\n      let userId = this.props.authorizedUserId;\r\n      this.props.getUserProfile(userId);\r\n      this.props.getUserStatus(userId);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateUserStatus={this.props.updateUserStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return <Component {...props} match={{ location, navigate, params }} />;\r\n  }\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    updateUserStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileContainer);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to=\"/login\" replace={true} />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n"],"names":["props","_jsxs","className","s","children","_jsx","src","alt","message","likes","PostForm","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","name","component","Textarea","validate","required","maxLengthCreator","React","postsElements","posts","map","p","Post","likesCount","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostCreator","MyPosts","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","onDoubleClick","isOwner","autoFocus","onBlur","updateUserStatus","onChange","e","currentTarget","value","_ref","profile","error","onSubmitClose","createField","Input","ProfileStatusWhithHooks","type","Object","keys","contacts","key","onClick","ProfileData","_ref2","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","photos","large","userAvatar","target","files","length","ProfileDataForm","initialValues","formData","then","Preloader","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","match","params","authorizedUserId","getUserProfile","getUserStatus","prevProps","Profile","_objectSpread","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","Navigate","to","replace"],"sourceRoot":""}