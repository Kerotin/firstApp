{"version":3,"file":"static/js/875.7dcaaee0.chunk.js","mappings":"6KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAuG,sBAAvG,EAAwI,0B,UCAxI,EAAgL,yB,SCKhL,EAJgB,SAACA,GACf,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEJ,EAAMK,SAC3C,E,uCCiDMC,GAAsBC,EAAAA,EAAAA,GAAU,CACpCC,KAAM,wBADoBD,EAlBL,SAACP,GACtB,OACES,EAAAA,EAAAA,MAAA,QAAMC,SAAUV,EAAMW,aAAaP,SAAA,EACjCH,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAACW,EAAAA,EAAK,CACJC,UAAWC,EAAAA,GACXC,KAAK,iBACLC,YAAY,qBACZC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,WAG1ClB,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,aAIhB,IAMA,EAjDgB,SAACJ,GACf,IAAIoB,EAAQpB,EAAMqB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAACC,GAAC,OACxCxB,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CAACX,KAAMU,EAAEV,KAAiBY,GAAIF,EAAEE,IAAZF,EAAEE,GAAgB,IAG/CC,EAAkBR,EAAMS,SAASL,KAAI,SAACM,GAAC,OACzC7B,EAAAA,EAAAA,KAAC8B,EAAO,CAAC1B,QAASyB,EAAEzB,QAAoBsB,GAAIG,EAAEH,IAAZG,EAAEH,GAAgB,IAOtD,OACElB,EAAAA,EAAAA,MAAA,OAAKP,UAAWC,EAAUC,SAAA,EACxBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeC,SAAEkB,KACjCrB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,KAChBM,EAAAA,EAAAA,MAAA,OAAKP,UAAWC,EAAWC,SAAA,EACzBH,EAAAA,EAAAA,KAAA,OAAAG,SAAMwB,KACN3B,EAAAA,EAAAA,KAACK,EAAmB,CAACI,SAVP,SAACsB,GACnBhC,EAAMiC,YAAYD,EAAOE,eAC3B,SAYF,E,UCdA,GAAeC,E,QAAAA,KACbC,EAAAA,EAAAA,KAdoB,SAAChB,GACrB,MAAO,CACLC,YAAaD,EAAMC,YAEvB,IACyB,SAACgB,GACxB,MAAO,CACLJ,YAAa,SAACC,GACZG,GAASC,EAAAA,EAAAA,GAAmBJ,GAC9B,EAEJ,IAIEK,EAAAA,EAFF,CAGEC,E,kJClBIC,EAA6B,SAACrB,GAAK,MAAM,CAC7CsB,OAAQtB,EAAMuB,KAAKD,OACpB,EAEYH,EAAmB,SAACK,GAAe,IACxCC,EAAiB,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,CAIpB,OAJoBC,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,SAAAC,MACrB,WACE,OAAKC,KAAKxD,MAAM0C,QACTzC,EAAAA,EAAAA,KAAC2C,GAASa,EAAAA,EAAAA,GAAA,GAAKD,KAAKxD,SADIC,EAAAA,EAAAA,KAACyD,EAAAA,GAAQ,CAACC,GAAG,SAASC,SAAS,GAEhE,KAACf,CAAA,CAJoB,CAASgB,EAAAA,WAUhC,OAHqCzB,EAAAA,EAAAA,IAAQK,EAARL,CACnCS,EAGJ,C","sources":["webpack://first_01/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://first_01/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__vlyOi\",\"dialogsItems\":\"Dialogs_dialogsItems__Va6vy\",\"line\":\"Dialogs_line__eyeR+\",\"messages\":\"Dialogs_messages__wVK+4\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Message_dialogs__IqbSN\",\"dialogsItems\":\"Message_dialogsItems__QrnSd\",\"dialog\":\"Message_dialog__k-G0W\",\"messages\":\"Message_messages__v5EvP\",\"message\":\"Message_message__WSOAX\"};","import s from \"./Message.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.message}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n\r\n  let messageElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} id={m.id} />\r\n  ));\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.line}></div>\r\n      <div className={s.messages}>\r\n        <div>{messageElements}</div>\r\n        <AddMessageFormRedux onSubmit={addNewMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newMessageText\"\r\n          placeholder=\"Enter your message\"\r\n          validate={[required, maxLengthCreator(100)]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n  form: \"dialogAddMessageForm\",\r\n})(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageText) => {\r\n      dispatch(sendMessageCreator(newMessageText));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to=\"/login\" replace={true} />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n"],"names":["props","_jsx","className","s","children","message","AddMessageFormRedux","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","maxLengthCreator","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","id","messageElements","messages","m","Message","values","sendMessage","newMessageText","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","this","_objectSpread","Navigate","to","replace","React"],"sourceRoot":""}